(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
    typeof define === 'function' && define.amd ? define(['exports'], factory) :
    (global = global || self, factory(global.Kagome = {}));
}(this, (function (exports) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    // Interface stolen from VSCode api
    var EventEmitter = /** @class */ (function () {
        function EventEmitter() {
            var _this = this;
            this.counter = 0;
            this.listeners = new Map();
            this.event = function (listener, thisArg, disposables) {
                var num = _this.counter++;
                _this.listeners.set(num, {
                    listener: listener.bind(thisArg),
                    disposables: disposables
                });
                return {
                    dispose: function () {
                        var _a;
                        if (!_this.listeners.has(num))
                            return;
                        (_a = _this.listeners.get(num).disposables) === null || _a === void 0 ? void 0 : _a.forEach(function (x) { return x.dispose; });
                        _this.listeners.delete(num);
                    }
                };
            };
        }
        EventEmitter.prototype.fire = function (x) {
            var e_1, _a;
            try {
                for (var _b = __values(this.listeners), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var _d = __read(_c.value, 2), listener = _d[1].listener;
                    listener(x);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        };
        EventEmitter.prototype.dispose = function () {
            var e_2, _a;
            try {
                for (var _b = __values(this.listeners), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var _d = __read(_c.value, 2), disposables = _d[1].disposables;
                    disposables === null || disposables === void 0 ? void 0 : disposables.forEach(function (x) { return x.dispose(); });
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_2) throw e_2.error; }
            }
            this.listeners.clear();
        };
        return EventEmitter;
    }());
    function nullEvent() {
        return function () { return ({ dispose: function () { } }); };
    }

    function isSentinel(val) {
        return (typeof val === 'object'
            && val !== null
            && 'onTrigger' in val
            && 'value' in val);
    }
    var SentinelExt = /** @class */ (function () {
        function SentinelExt() {
        }
        SentinelExt.prototype.f = function (func) {
            var func1 = function (value) { return pureS(func(value)); };
            return pureS(new SentinelFuncSentinel(this, func1));
        };
        SentinelExt.prototype.sf = function (func) {
            return pureS(new SentinelFuncSentinel(this, func));
        };
        SentinelExt.prototype.df = function (func) {
            return pureS(new DisposeFuncSentinel(this, func));
        };
        return SentinelExt;
    }());
    var PureSentinel = /** @class */ (function (_super) {
        __extends(PureSentinel, _super);
        function PureSentinel(value) {
            var _this = _super.call(this) || this;
            _this.value = value;
            _this.onTrigger = nullEvent();
            return _this;
        }
        return PureSentinel;
    }(SentinelExt));
    function pureS(value) {
        return new PureSentinel(value);
    }
    var SentinelFuncSentinel = /** @class */ (function (_super) {
        __extends(SentinelFuncSentinel, _super);
        function SentinelFuncSentinel(wrapped, func, disposables) {
            if (disposables === void 0) { disposables = []; }
            var _this = _super.call(this) || this;
            _this.wrapped = wrapped;
            _this.func = func;
            _this.disposables = disposables;
            _this.current = func(wrapped.value);
            _this.value = _this.current.value;
            _this.triggerEmitter = new EventEmitter();
            _this.onTrigger = _this.triggerEmitter.event;
            _this.listener = _this.current.onTrigger(_this.handleNew.bind(_this));
            _this.wrapped.onTrigger(function (newInput) {
                _this.listener.dispose();
                _this.current = func(newInput);
                _this.handleNew(_this.current.value);
                _this.listener = _this.current.onTrigger(_this.handleNew.bind(_this));
            });
            return _this;
        }
        SentinelFuncSentinel.prototype.handleNew = function (newVal) {
            this.value = newVal;
            this.triggerEmitter.fire(newVal);
        };
        SentinelFuncSentinel.prototype.dispose = function () {
            var _a, _b;
            this.listener.dispose();
            (_b = (_a = this.current) === null || _a === void 0 ? void 0 : _a.dispose) === null || _b === void 0 ? void 0 : _b.call(_a);
            this.triggerEmitter.dispose();
            this.disposables.forEach(function (x) { var _a; return (_a = x.dispose) === null || _a === void 0 ? void 0 : _a.call(x); });
        };
        return SentinelFuncSentinel;
    }(SentinelExt));
    var DisposeFuncSentinel = /** @class */ (function () {
        function DisposeFuncSentinel(wrapped, func) {
            this.wrapped = wrapped;
            this.func = func;
            this.current = func(this.wrapped.value);
            this.listenerD = this.wrapped.onTrigger(this.handle.bind(this));
        }
        DisposeFuncSentinel.prototype.handle = function (newValue) {
            var _a, _b;
            (_b = (_a = this.current).dispose) === null || _b === void 0 ? void 0 : _b.call(_a);
            this.current = this.func(newValue);
        };
        DisposeFuncSentinel.prototype.dispose = function () {
            var _a, _b;
            this.listenerD.dispose();
            (_b = (_a = this.current).dispose) === null || _b === void 0 ? void 0 : _b.call(_a);
        };
        return DisposeFuncSentinel;
    }());

    var Scheduler = /** @class */ (function () {
        function Scheduler() {
            this.pending = [];
            this.running = false;
        }
        Scheduler.prototype.add = function (action) {
            this.pending.push(action);
            this.begin();
        };
        Scheduler.prototype.begin = function () {
            if (this.running)
                return;
            try {
                this.running = true;
                while (this.pending.length) {
                    this.pending.shift()();
                }
            }
            finally {
                this.running = false;
            }
        };
        return Scheduler;
    }());
    var globalScheduler = new Scheduler();

    var Process = /** @class */ (function (_super) {
        __extends(Process, _super);
        function Process(pf, checkNew) {
            var _this = _super.call(this) || this;
            _this.pf = pf;
            _this.checkNew = checkNew;
            _this.state = [];
            _this.triggerEmitter = new EventEmitter();
            _this.onTrigger = _this.triggerEmitter.event;
            _this.value = _this.run();
            return _this;
        }
        Process.prototype.run = function () {
            var res = this.pf(this.makeWorker());
            return res;
        };
        Process.prototype.makeWorker = function () {
            var _this = this;
            var curIndex = 0;
            return function (sen) {
                var _a;
                var index = curIndex++;
                if (index >= _this.state.length) {
                    var val = sen();
                    var handleD = (_a = val.onTrigger) === null || _a === void 0 ? void 0 : _a.call(val, function () {
                        return globalScheduler.add(function () {
                            var e_1, _a;
                            var _b, _c, _d;
                            try {
                                for (var _e = __values(_this.state.splice(index + 1).reverse()), _f = _e.next(); !_f.done; _f = _e.next()) {
                                    var se = _f.value;
                                    (_b = se.handleD) === null || _b === void 0 ? void 0 : _b.dispose();
                                    (_d = (_c = se.cache).dispose) === null || _d === void 0 ? void 0 : _d.call(_c);
                                }
                            }
                            catch (e_1_1) { e_1 = { error: e_1_1 }; }
                            finally {
                                try {
                                    if (_f && !_f.done && (_a = _e.return)) _a.call(_e);
                                }
                                finally { if (e_1) throw e_1.error; }
                            }
                            var newVal = _this.run();
                            var shouldTrigger = _this.checkNew(_this.value, newVal);
                            _this.value = newVal;
                            if (shouldTrigger)
                                _this.triggerEmitter.fire(_this.value);
                        });
                    });
                    _this.state.push({
                        cache: val,
                        handleD: handleD !== null && handleD !== void 0 ? handleD : null
                    });
                }
                // TODO: Add call stack check for cached
                return _this.state[index].cache.value;
            };
        };
        Process.prototype.dispose = function () {
            var e_2, _a;
            var _b, _c, _d;
            try {
                for (var _e = __values(this.state.reverse()), _f = _e.next(); !_f.done; _f = _e.next()) {
                    var se = _f.value;
                    (_b = se.handleD) === null || _b === void 0 ? void 0 : _b.dispose();
                    (_d = (_c = se.cache).dispose) === null || _d === void 0 ? void 0 : _d.call(_c);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_f && !_f.done && (_a = _e.return)) _a.call(_e);
                }
                finally { if (e_2) throw e_2.error; }
            }
            this.triggerEmitter.dispose();
            this.state.length = 0;
        };
        return Process;
    }(SentinelExt));
    function process(pf) {
        return new Process(pf, function (o, n) { return o !== n; });
    }
    function processAll(pf) {
        return new Process(pf, function () { return true; });
    }
    function toplevel(p) {
        return p instanceof Process ? p : process(p);
    }

    function generalElementMovementD(node, action) {
        var oldParent = node.parentNode;
        var oldNextSibling = node.nextSibling;
        action();
        return {
            dispose: function () {
                if (oldParent)
                    oldParent.insertBefore(oldParent, oldNextSibling);
                else
                    node.parentNode.removeChild(node);
            }
        };
    }
    function appendChildD(parent, child) {
        return generalElementMovementD(child, function () {
            parent.appendChild(child);
        });
    }

    function domEvent(target, name, options) {
        return function (listener, thisArg, disposables) {
            // Note: listen should probably be new each time
            var listen = function (event) { return listener.call(thisArg, event); };
            target.addEventListener(name, listen, options);
            return {
                dispose: function () {
                    target.removeEventListener(name, listen, options);
                    disposables === null || disposables === void 0 ? void 0 : disposables.forEach(function (x) { return x.dispose(); });
                }
            };
        };
    }

    function setAttributeD(target, name, value) {
        var oldValue = target.getAttribute(name);
        target.setAttribute(name, value);
        return {
            dispose: function () {
                if (oldValue)
                    target.setAttribute(name, oldValue);
                else
                    target.removeAttribute(name);
            }
        };
    }

    var ListeningSentinel = /** @class */ (function (_super) {
        __extends(ListeningSentinel, _super);
        function ListeningSentinel(event) {
            var _this = _super.call(this) || this;
            _this.value = undefined;
            _this.eventEmitter = new EventEmitter();
            _this.onTrigger = _this.eventEmitter.event;
            _this.eventDisposable = event(function (x) {
                _this.value = x;
                _this.eventEmitter.fire(x);
            });
            return _this;
        }
        ListeningSentinel.prototype.dispose = function () {
            this.eventDisposable.dispose();
            this.eventEmitter.dispose();
        };
        return ListeningSentinel;
    }(SentinelExt));
    function listenS(event) {
        return new ListeningSentinel(event);
    }

    var counter = 0;
    var Register = /** @class */ (function (_super) {
        __extends(Register, _super);
        function Register(value) {
            var _this = _super.call(this) || this;
            _this.value = value;
            _this.triggerEmitter = new EventEmitter();
            _this.onTrigger = _this.triggerEmitter.event;
            _this.num = counter++;
            _this.pending = false;
            return _this;
        }
        Register.prototype.setDirectly = function (value) {
            var _this = this;
            this.value = value;
            if (this.pending)
                return;
            this.pending = true;
            globalScheduler.add(function () {
                _this.pending = false;
                _this.triggerEmitter.fire(_this.value);
            });
        };
        Register.prototype.setD = function (value) {
            var _this = this;
            var oldValue = this.value;
            this.setDirectly(value);
            return {
                dispose: function () { return _this.setDirectly(oldValue); }
            };
        };
        Register.prototype.dispose = function () {
            this.triggerEmitter.dispose();
        };
        return Register;
    }(SentinelExt));
    function reg(value) {
        return pureS(new Register(value));
    }

    function isArraySentinel(value) {
        return isSentinel(value) && ('onArrayChange' in value);
    }
    var ArraySentinelExt = /** @class */ (function (_super) {
        __extends(ArraySentinelExt, _super);
        function ArraySentinelExt() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ArraySentinelExt.prototype.fa = function (func) {
            var func1 = function (value) { return pureS([func(value)]); };
            return pureS(new FuncArraySentinel(this, func1));
        };
        ArraySentinelExt.prototype.sfa = function (func) {
            var func1 = function (value) {
                var sen = func(value);
                return new SentinelFuncSentinel(sen, function (x) { return pureS([x]); }, [sen]);
            };
            return pureS(new FuncArraySentinel(this, func1));
        };
        ArraySentinelExt.prototype.asfa = function (func) {
            return pureS(new FuncArraySentinel(this, func));
        };
        ArraySentinelExt.prototype.dfa = function (func) {
            return pureS(new DisposeFuncArraySentinel(this, func));
        };
        return ArraySentinelExt;
    }(SentinelExt));
    var ArrayRegister = /** @class */ (function (_super) {
        __extends(ArrayRegister, _super);
        function ArrayRegister(initial) {
            var _this = _super.call(this) || this;
            _this.wrapped = new Register(initial);
            _this.arrayChangeEmitter = new EventEmitter();
            _this.onArrayChange = _this.arrayChangeEmitter.event;
            _this.changeCache = [];
            return _this;
        }
        Object.defineProperty(ArrayRegister.prototype, "value", {
            get: function () { return this.wrapped.value; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ArrayRegister.prototype, "onTrigger", {
            get: function () { return this.wrapped.onTrigger; },
            enumerable: true,
            configurable: true
        });
        ArrayRegister.prototype.notifyPatch = function (patch) {
            var _this = this;
            var shouldNotify = this.changeCache.length === 0;
            this.changeCache.push(patch);
            if (shouldNotify) {
                globalScheduler.add(function () {
                    var savedCache = _this.changeCache;
                    _this.changeCache = [];
                    _this.arrayChangeEmitter.fire(savedCache);
                });
            }
        };
        ArrayRegister.prototype.splice = function (start, deleteCount) {
            var _a;
            var items = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                items[_i - 2] = arguments[_i];
            }
            var deleted = (_a = this.value).splice.apply(_a, __spread([start, deleteCount], items));
            this.wrapped.setDirectly(this.value);
            this.notifyPatch({
                type: 'splice',
                start: start, deleteCount: deleteCount,
                inserted: items
            });
            return deleted;
        };
        ArrayRegister.prototype.setDirectly = function (value) {
            var oldLength = this.value.length;
            this.wrapped.setDirectly(value);
            this.notifyPatch({
                type: 'splice',
                start: 0, deleteCount: oldLength,
                inserted: this.value
            });
        };
        ArrayRegister.prototype.setD = function (value) {
            var _this = this;
            var oldValue = this.value;
            this.setDirectly(value);
            return {
                dispose: function () {
                    _this.setDirectly(oldValue);
                }
            };
        };
        ArrayRegister.prototype.getIndex = function (index) {
            return this.value[index];
        };
        ArrayRegister.prototype.setIndex = function (index, value) {
            this.value[index] = value;
            this.notifyPatch({
                type: 'update',
                index: index, value: value
            });
        };
        Object.defineProperty(ArrayRegister.prototype, "length", {
            get: function () {
                return this.value.length;
            },
            enumerable: true,
            configurable: true
        });
        ArrayRegister.prototype.push = function (value) {
            this.splice(this.length, 0, value);
        };
        ArrayRegister.prototype.pop = function () {
            if (this.length > 0)
                return this.splice(this.length, 1)[0];
            else
                return undefined;
        };
        ArrayRegister.prototype.unshift = function (value) {
            this.splice(0, 0, value);
        };
        ArrayRegister.prototype.shift = function () {
            if (this.length > 0)
                return this.splice(0, 1)[0];
            else
                return undefined;
        };
        ArrayRegister.prototype.dispose = function () {
            this.wrapped.dispose();
            this.arrayChangeEmitter.dispose();
        };
        return ArrayRegister;
    }(ArraySentinelExt));
    var arrayRegisterHandlers = {
        get: function (target, index, receiver) {
            if (typeof index === 'number') {
                return target.value[index];
            }
            else {
                return Reflect.get(target, index, receiver);
            }
        },
        set: function (target, index, value, receiver) {
            if (typeof index === 'number') {
                target.setIndex(index, value);
                return true;
            }
            else {
                return Reflect.set(target, index, value, receiver);
            }
        }
    };
    function array(initial) {
        if (initial === void 0) { initial = []; }
        var areg = new ArrayRegister(initial);
        var wrapped = new Proxy(areg, arrayRegisterHandlers);
        return pureS(wrapped);
    }
    var FuncArraySentinel = /** @class */ (function (_super) {
        __extends(FuncArraySentinel, _super);
        function FuncArraySentinel(wrapped, func, disposables) {
            var _a;
            if (disposables === void 0) { disposables = []; }
            var _this = _super.call(this) || this;
            _this.wrapped = wrapped;
            _this.func = func;
            _this.disposables = disposables;
            _this.changeCache = [];
            _this.current = _this.wrapped.value.map(func);
            _this.offsets = Array(_this.current.length + 1);
            _this.offsets[0] = 0;
            _this.value = [];
            for (var i = 0; i != _this.current.length; i++) {
                (_a = _this.value).push.apply(_a, __spread(_this.current[i].value));
                _this.offsets[i + 1] = _this.value.length;
            }
            _this.currentListeners = _this.current.map(_this.handleSentinel.bind(_this));
            _this.arrayChangeEmitter = new EventEmitter();
            _this.onArrayChange = _this.arrayChangeEmitter.event;
            _this.triggerEmitter = new EventEmitter();
            _this.onTrigger = _this.triggerEmitter.event;
            _this.listener = _this.wrapped.onArrayChange(_this.handleChange.bind(_this));
            return _this;
        }
        FuncArraySentinel.prototype.emitChange = function (change) {
            var _a;
            var _this = this;
            var shouldFire = this.changeCache.length === 0;
            (_a = this.changeCache).push.apply(_a, __spread(change));
            if (shouldFire)
                globalScheduler.add(function () {
                    var savedCache = _this.changeCache;
                    _this.changeCache = [];
                    _this.arrayChangeEmitter.fire(savedCache);
                    _this.triggerEmitter.fire(_this.value);
                });
        };
        FuncArraySentinel.prototype.handleChange = function (change) {
            var _this = this;
            var newChange = change.map(function (patch) {
                var _a, _b, _c, _d;
                var _e, _f;
                if (patch.type === 'splice') {
                    var newSentinels = patch.inserted.map(_this.func);
                    (_a = _this.current).splice.apply(_a, __spread([patch.start, patch.deleteCount], newSentinels)).forEach(function (sen) { var _a; return (_a = sen === null || sen === void 0 ? void 0 : sen.dispose) === null || _a === void 0 ? void 0 : _a.call(sen); });
                    var newListeners = newSentinels.map(function (sen) {
                        return _this.handleSentinel(sen);
                    });
                    (_b = _this.currentListeners).splice.apply(_b, __spread([patch.start, patch.deleteCount], newListeners)).forEach(function (l) { return l.dispose(); });
                    var newValues = newSentinels.map(function (sen) { return sen.value; });
                    var start = _this.offsets[patch.start];
                    var deleteCount = _this.offsets[patch.start + patch.deleteCount] - start;
                    var newOffsets = Array(newValues.length);
                    var newValuesFlat = [];
                    for (var i = 0; i != newValues.length; i++) {
                        newValuesFlat.push.apply(newValuesFlat, __spread(newValues[i]));
                        newOffsets[i] = newValuesFlat.length + start;
                    }
                    (_c = _this.value).splice.apply(_c, __spread([start,
                        deleteCount], newValuesFlat));
                    (_d = _this.offsets).splice.apply(_d, __spread([patch.start + 1, patch.deleteCount], newOffsets));
                    var delta = newValuesFlat.length - deleteCount;
                    if (delta !== 0) {
                        for (var j = patch.start + newOffsets.length + 1; j != _this.offsets.length; j++)
                            _this.offsets[j] += delta;
                    }
                    return {
                        type: 'splice',
                        start: start,
                        deleteCount: deleteCount,
                        inserted: newValuesFlat
                    };
                }
                else if (patch.type === 'update') {
                    _this.currentListeners[patch.index].dispose();
                    (_f = (_e = _this.current[patch.index]).dispose) === null || _f === void 0 ? void 0 : _f.call(_e);
                    var sen = _this.func(patch.value);
                    _this.current[patch.index] = sen;
                    _this.handleSentinel(sen);
                    _this.replaceSegment(patch.index, sen.value);
                    return {
                        type: 'update',
                        index: patch.index,
                        value: _this.value[patch.index]
                    };
                }
                else {
                    throw new Error('Wrong patch type attribute');
                }
            });
            this.emitChange(newChange);
        };
        FuncArraySentinel.prototype.handleSentinel = function (sen) {
            var _this = this;
            return sen.onTrigger(function (newVal) {
                var index = _this.current.indexOf(sen);
                var change = [{
                        type: 'splice',
                        start: _this.offsets[index],
                        deleteCount: _this.offsets[index + 1] - _this.offsets[index],
                        inserted: newVal
                    }];
                _this.replaceSegment(index, newVal);
                _this.emitChange(change);
            });
        };
        FuncArraySentinel.prototype.replaceSegment = function (i, newVal) {
            var _a;
            (_a = this.value).splice.apply(_a, __spread([this.offsets[i],
                this.offsets[i + 1] - this.offsets[i]], newVal));
            var delta = newVal.length - (this.offsets[i + 1] - this.offsets[i]);
            if (delta !== 0) {
                for (var j = i + 1; j != this.offsets.length; j++)
                    this.offsets[j] += delta;
            }
        };
        FuncArraySentinel.prototype.dispose = function () {
            this.arrayChangeEmitter.dispose();
            this.triggerEmitter.dispose();
            this.listener.dispose();
            this.current.forEach(function (x) { var _a; return (_a = x.dispose) === null || _a === void 0 ? void 0 : _a.call(x); });
            this.currentListeners.forEach(function (x) { return x.dispose(); });
            this.disposables.forEach(function (x) { var _a; return (_a = x.dispose) === null || _a === void 0 ? void 0 : _a.call(x); });
        };
        return FuncArraySentinel;
    }(ArraySentinelExt));
    var DisposeFuncArraySentinel = /** @class */ (function () {
        function DisposeFuncArraySentinel(wrapped, func) {
            this.wrapped = wrapped;
            this.func = func;
            this.current = this.wrapped.value.map(func);
            this.listenerD = this.wrapped.onArrayChange(this.handle.bind(this));
        }
        DisposeFuncArraySentinel.prototype.handle = function (change) {
            var e_1, _a, _b;
            var _c, _d;
            try {
                for (var change_1 = __values(change), change_1_1 = change_1.next(); !change_1_1.done; change_1_1 = change_1.next()) {
                    var patch = change_1_1.value;
                    if (patch.type === 'splice') {
                        var newItems = patch.inserted.map(this.func);
                        (_b = this.current).splice.apply(_b, __spread([patch.start,
                            patch.deleteCount], newItems)).forEach(function (x) { var _a; return (_a = x.dispose) === null || _a === void 0 ? void 0 : _a.call(x); });
                    }
                    else if (patch.type === 'update') {
                        (_d = (_c = this.current[patch.index]).dispose) === null || _d === void 0 ? void 0 : _d.call(_c);
                        this.current[patch.index] = this.func(patch.value);
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (change_1_1 && !change_1_1.done && (_a = change_1.return)) _a.call(change_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        };
        DisposeFuncArraySentinel.prototype.dispose = function () {
            this.listenerD.dispose();
            this.current.forEach(function (x) { var _a; return (_a = x.dispose) === null || _a === void 0 ? void 0 : _a.call(x); });
        };
        return DisposeFuncArraySentinel;
    }());

    var Mapped = /** @class */ (function (_super) {
        __extends(Mapped, _super);
        function Mapped(map) {
            var _this = _super.call(this) || this;
            _this.map = map;
            _this.triggerEmitter = new EventEmitter();
            _this.onTrigger = _this.triggerEmitter.event;
            _this.listenersD = [];
            _this.value = (Array.isArray(map) ? [] : {});
            var _loop_1 = function (key) {
                var val = this_1.map[key];
                if (isSentinel(val)) {
                    this_1.value[key] = val.value;
                    this_1.listenersD.push(val.onTrigger(function (newValue) {
                        _this.updateHook(key, newValue);
                        globalScheduler.add(function () {
                            _this.value[key] = newValue;
                            _this.triggerEmitter.fire(_this.value);
                        });
                    }));
                }
                else {
                    this_1.value[key] = val;
                }
            };
            var this_1 = this;
            for (var key in _this.map) {
                _loop_1(key);
            }
            return _this;
        }
        Mapped.prototype.updateHook = function (key, _value) {
            // Nothing
        };
        Mapped.prototype.dispose = function () {
            var _a;
            this.listenersD.forEach(function (x) { return x.dispose(); });
            for (var key in this.map) {
                var val = this.map[key];
                if (isSentinel(val))
                    (_a = val) === null || _a === void 0 ? void 0 : _a.dispose();
            }
        };
        return Mapped;
    }(SentinelExt));
    var MappedArray = /** @class */ (function (_super) {
        __extends(MappedArray, _super);
        function MappedArray(map) {
            var _this = _super.call(this, map) || this;
            _this.arrayChangeEmitter = new EventEmitter();
            _this.onArrayChange = _this.arrayChangeEmitter.event;
            return _this;
        }
        MappedArray.prototype.updateHook = function (index, value) {
            this.arrayChangeEmitter.fire([{
                    type: 'update',
                    index: index, value: value
                }]);
        };
        return MappedArray;
    }(Mapped));
    function mapped(map) {
        if (Array.isArray(map))
            return new MappedArray(map);
        else
            return new Mapped(map);
    }

    function kagomeElement(type, props) {
        var children = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            children[_i - 2] = arguments[_i];
        }
        if (typeof type === 'string') {
            return new KagomeIntrinsic(type, props, children);
        }
        else {
            return type.apply(void 0, __spread([(props !== null && props !== void 0 ? props : {})], children));
        }
    }
    var KagomeIntrinsic = /** @class */ (function (_super) {
        __extends(KagomeIntrinsic, _super);
        function KagomeIntrinsic(type, props, children) {
            var _this = _super.call(this) || this;
            _this.type = type;
            _this.props = props;
            _this.children = children;
            _this.listenersD = [];
            _this.onTrigger = nullEvent();
            _this.propsSave = {};
            _this.value = document.createElement(type);
            _this.childOffsets = Array(children.length + 1);
            _this.childOffsets[0] = 0;
            _this.populateProps(props);
            _this.populateChildren(children);
            return _this;
        }
        KagomeIntrinsic.prototype.populateProps = function (props) {
            var e_1, _a;
            var _this = this;
            var _loop_1 = function (k, v) {
                if (isSentinel(v)) {
                    applyProp(this_1.value, k, v.value, this_1.propsSave);
                    this_1.listenersD.push(v.onTrigger(function (newVal) {
                        applyProp(_this.value, k, newVal, _this.propsSave);
                    }));
                }
                else {
                    applyProp(this_1.value, k, v, this_1.propsSave);
                }
            };
            var this_1 = this;
            try {
                for (var _b = __values(Object.entries(props !== null && props !== void 0 ? props : {})), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var _d = __read(_c.value, 2), k = _d[0], v = _d[1];
                    _loop_1(k, v);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        };
        KagomeIntrinsic.prototype.populateChildren = function (children) {
            var range = document.createRange();
            range.setStart(this.value, 0);
            range.setEnd(this.value, 0);
            for (var i = 0; i != children.length; i++) {
                var child = children[i];
                if (isArraySentinel(child)) {
                    this.genArraySentinel(range, i, child);
                }
                else if (isSentinel(child)) {
                    this.genSentinel(range, i, child);
                }
                else {
                    genChild(range, child);
                }
                this.childOffsets[i + 1] = range.endOffset;
                range.setStart(range.endContainer, range.endOffset);
            }
        };
        KagomeIntrinsic.prototype.genSentinel = function (range, i, child) {
            var _this = this;
            genChild(range, child.value);
            this.listenersD.push(child.onTrigger(function (newVal) {
                var newRange = document.createRange();
                newRange.setStart(_this.value, _this.childOffsets[i]);
                newRange.setEnd(_this.value, _this.childOffsets[i + 1]);
                genChild(newRange, newVal);
                var delta = newRange.endOffset - _this.childOffsets[i + 1];
                if (delta !== 0) {
                    for (var j = i + 1; j != _this.childOffsets.length; j++)
                        _this.childOffsets[j] += delta;
                }
            }));
        };
        KagomeIntrinsic.prototype.genArraySentinel = function (range, i, child) {
            var _this = this;
            var offset = Array(child.value.length + 1);
            offset[0] = 0;
            var childRange = range.cloneRange();
            for (var j = 0; j != child.value.length; j++) {
                var piece = child.value[j];
                genChild(childRange, piece);
                offset[j + 1] = childRange.endOffset - range.startOffset;
                childRange.setStart(childRange.endContainer, childRange.endOffset);
            }
            range.setEnd(childRange.endContainer, childRange.endOffset);
            this.listenersD.push(child.onArrayChange(function (change) {
                var e_2, _a;
                var base = _this.childOffsets[i];
                var workSplice = function (_a) {
                    var start = _a.start, deleteCount = _a.deleteCount, inserted = _a.inserted;
                    var newRange = document.createRange();
                    newRange.setStart(_this.value, base + offset[start]);
                    newRange.setEnd(_this.value, base + offset[start + deleteCount]);
                    newRange.deleteContents();
                    var newOffsets = Array(inserted.length);
                    for (var i_1 = 0; i_1 != inserted.length; i_1++) {
                        genChild(newRange, inserted[i_1]);
                        newOffsets[i_1] = newRange.endOffset - base;
                        newRange.setStart(newRange.endContainer, newRange.endOffset);
                    }
                    var delta = newRange.endOffset - base - offset[start + deleteCount];
                    offset.splice.apply(offset, __spread([start + 1, deleteCount], newOffsets));
                    if (delta !== 0) {
                        for (var j = start + inserted.length + 1; j != offset.length; j++)
                            offset[j] += delta;
                    }
                };
                try {
                    for (var change_1 = __values(change), change_1_1 = change_1.next(); !change_1_1.done; change_1_1 = change_1.next()) {
                        var patch = change_1_1.value;
                        if (patch.type === 'splice') {
                            workSplice(patch);
                        }
                        else if (patch.type === 'update') {
                            workSplice({
                                start: patch.index,
                                deleteCount: 1,
                                inserted: [patch.value]
                            });
                        }
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (change_1_1 && !change_1_1.done && (_a = change_1.return)) _a.call(change_1);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
                var delta = offset[offset.length - 1] - _this.childOffsets[i + 1];
                if (delta !== 0) {
                    for (var j = i + 1; j != _this.childOffsets.length; j++)
                        _this.childOffsets[j] += delta;
                }
            }));
        };
        KagomeIntrinsic.prototype.dispose = function () {
            var e_3, _a;
            var _b, _c;
            this.listenersD.forEach(function (x) { return x.dispose(); });
            if (this.props !== null) {
                for (var val in Object.values(this.props)) {
                    if (isSentinel(val))
                        (_b = val) === null || _b === void 0 ? void 0 : _b.dispose();
                }
            }
            try {
                for (var _d = __values(this.children), _e = _d.next(); !_e.done; _e = _d.next()) {
                    var child = _e.value;
                    if (isSentinel(child))
                        (_c = child) === null || _c === void 0 ? void 0 : _c.dispose();
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_e && !_e.done && (_a = _d.return)) _a.call(_d);
                }
                finally { if (e_3) throw e_3.error; }
            }
        };
        return KagomeIntrinsic;
    }(SentinelExt));
    function applyProp(element, prop, value, propsSave) {
        if (value === undefined) {
            if (prop in propsSave) {
                var saved = propsSave[prop];
                if (prop in element) {
                    element[prop] = saved;
                }
                else {
                    if (saved === null)
                        element.removeAttribute(prop);
                    else
                        element.setAttribute(prop, saved);
                }
                delete propsSave[prop];
            }
        }
        else {
            if (prop in element) {
                if (!(prop in propsSave))
                    propsSave[prop] = element[prop];
                element[prop] = value;
            }
            else {
                if (!(prop in propsSave))
                    propsSave[prop] = element.getAttribute(prop);
                element.setAttribute(prop, value);
            }
        }
    }
    function genChild(range, ch) {
        range.deleteContents();
        if (typeof ch === 'boolean'
            || ch === undefined
            || ch === null
            || ch === '') ;
        else if (Array.isArray(ch)) {
            var frag_1 = document.createDocumentFragment();
            ch.forEach(function (x) { return frag_1.append(x); });
            range.insertNode(frag_1);
        }
        else if (typeof ch === 'string' || typeof ch === 'number') {
            var text = document.createTextNode(String(ch));
            range.insertNode(text);
        }
        else {
            range.insertNode(ch);
        }
    }

    exports.ArrayRegister = ArrayRegister;
    exports.ArraySentinelExt = ArraySentinelExt;
    exports.DisposeFuncArraySentinel = DisposeFuncArraySentinel;
    exports.DisposeFuncSentinel = DisposeFuncSentinel;
    exports.EventEmitter = EventEmitter;
    exports.FuncArraySentinel = FuncArraySentinel;
    exports.KagomeIntrinsic = KagomeIntrinsic;
    exports.ListeningSentinel = ListeningSentinel;
    exports.Mapped = Mapped;
    exports.MappedArray = MappedArray;
    exports.Process = Process;
    exports.PureSentinel = PureSentinel;
    exports.Register = Register;
    exports.Scheduler = Scheduler;
    exports.SentinelExt = SentinelExt;
    exports.SentinelFuncSentinel = SentinelFuncSentinel;
    exports.appendChildD = appendChildD;
    exports.array = array;
    exports.domEvent = domEvent;
    exports.generalElementMovementD = generalElementMovementD;
    exports.globalScheduler = globalScheduler;
    exports.isArraySentinel = isArraySentinel;
    exports.isSentinel = isSentinel;
    exports.kagomeElement = kagomeElement;
    exports.listenS = listenS;
    exports.mapped = mapped;
    exports.nullEvent = nullEvent;
    exports.process = process;
    exports.processAll = processAll;
    exports.pureS = pureS;
    exports.reg = reg;
    exports.setAttributeD = setAttributeD;
    exports.toplevel = toplevel;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=kagome.js.map
